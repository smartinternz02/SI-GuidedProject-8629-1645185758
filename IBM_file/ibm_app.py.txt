import numpy as np
from flask import Flask, request, jsonify, render_template
import pickle
import pandas as pd
import requests
 
# NOTE: you must manually set API_KEY below using information retrieved from your IBM Cloud account.
API_KEY = "MHLG-wkplyQJ35N_1neKLLoGDxTrf2xMkncI1BSanE-F"
token_response = requests.post('https://iam.cloud.ibm.com/identity/token', data={"apikey":
API_KEY, "grant_type": 'urn:ibm:params:oauth:grant-type:apikey'})
mltoken = token_response.json()["access_token"]
 
header = {'Content-Type': 'application/json', 'Authorization': 'Bearer ' + mltoken}
 
# NOTE: manually define and pass the array(s) of values to be scored in the next line
payload_scoring = {"input_data": [{"fields": [array_of_input_fields], "values": [array_of_values_to_be_scored, another_array_of_values_to_be_scored]}]}
 
response_scoring = requests.post('https://us-south.ml.cloud.ibm.com/ml/v4/deployments/510ef900-f7ba-43c7-bc9d-6373b31c786a/predictions?version=2022-04-15', json=payload_scoring,
 headers={'Authorization': 'Bearer ' + mltoken})
print("Scoring response")
print(response_scoring.json())
 
app = Flask(__name__) #initialising the flask app
filepath="model_movies.pkl"
model=pickle.load(open(filepath,'rb'))#loading the saved model
scalar=pickle.load(open("scalar_movies.pkl","rb"))#loading the saved scalar file
 
@app.route('/')
def home():
    return render_template('Demo2.html')
 
@app.route('/y_predict',methods=['POST'])
def y_predict():
    '''
    For rendering results on HTML 
    '''
    input_feature=[float(x) for x in request.form.values() ]  
    features_values=[np.array(input_feature)]
    feature_name=['budget','genres','popularity','runtime','vote_average','vote_count',
                  'director','release_month','release_DOW']
    x_df=pd.DataFrame(features_values,columns=feature_name)
    x=scalar.transform(x_df)
     # predictions using the loaded model file
    prediction=model.predict(x)  
    print("Prediction is:",prediction)
    return render_template("resultnew.html",prediction_text=prediction[0])
if __name__ == "__main__":
    app.run(debug=True) 
